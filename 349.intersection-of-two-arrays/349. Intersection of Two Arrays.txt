class Solution {
public:


   bool binary_search(vector<int> &nums, int target){
    int left =0;
    int right = nums.size()-1;

    while(left <= right){
        int mid = (left + right)/2;

        if(nums[mid] == target) return true;

        else if(nums[mid] < target){
            left = mid +1;
        }

        else {
           right = mid - 1;
        }
    }
         return false;
}


    vector<int> intersection(vector<int>& nums1, vector<int>& nums2){

          int a = nums1.size();
            int b = nums2.size();

            vector<int> nho;
            vector<int> lon;
            if(a<b){
                nho = nums1;
                lon = nums2;
            }

            else{
                nho = nums2;
                lon = nums1;
            }

        sort(nho.begin(), nho.end());
        sort(lon.begin(), lon.end());

        set<int> PhanLoai;
        for(int i=0; i<nho.size(); i++){
                if(binary_search(lon, nho[i])){
                    PhanLoai.insert(nho[i]);
                }
        }

        vector<int> ketqua;

        set<int>::iterator it = PhanLoai.begin();

        while(it!=PhanLoai.end()){
            ketqua.push_back(*it);
            it++;
        }
        return ketqua;
}
};